{"version":3,"sources":["components/ContactForm/ContactForm.module.css","components/Container/Container.module.css","components/Filter/Filter.module.css","components/Container/Container.js","components/ContactForm/ContactForm.js","components/Filter/Filter.js","redux/actions.js","components/ContactList/ContactList.js","App.js","redux/slices/contactsSlice.js","redux/store.js","index.js","components/ContactList/ContactList.module.css"],"names":["module","exports","Container","children","className","s","container","ContactForm","onSubmit","useState","name","number","contact","setContact","nameInputId","shortid","generate","numberInputId","handleChange","event","target","value","reset","form","preventDefault","label","htmlFor","type","onChange","id","pattern","title","required","button","Filter","createContact","createAsyncThunk","a","axios","post","result","data","getContacts","get","deleteContact","ContactList","contactsData","dispatch","useDispatch","list","map","item","onClick","deleteContactClick","App","useSelector","state","contacts","items","error","loader","filter","setFilter","useEffect","getVisibleContacts","useMemo","normalizedFilter","toLowerCase","includes","find","presentContact","alert","currentTarget","contactSlice","createSlice","initialState","extraReducers","pending","rejected","fulfilled","payload","rootReducer","actions","addContact","store","configureStore","reducer","devTools","process","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.fea8734c.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"form\":\"ContactForm_form__tVDlu\",\"label\":\"ContactForm_label__32662\",\"button\":\"ContactForm_button__JkxoO\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"Container_container__2aXVB\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"label\":\"Filter_label__fF5kp\"};","import PropTypes from 'prop-types';\nimport s from './Container.module.css';\n\nexport default function Container({ children }) {\n  return <div className={s.container}>{children}</div>;\n}\n\nContainer.propTypes = {\n  children: PropTypes.array.isRequired,\n};\n","import { useState } from 'react';\r\nimport shortid from 'shortid';\r\nimport s from './ContactForm.module.css';\r\n\r\nexport default function ContactForm({ onSubmit }) {\r\n  const [contact, setContact] = useState({\r\n    name: '',\r\n    number: '',\r\n  });\r\n\r\n  const nameInputId = shortid.generate();\r\n  const numberInputId = shortid.generate();\r\n\r\n  const handleSubmit = event => {\r\n    event.preventDefault();\r\n\r\n    onSubmit({\r\n      contact,\r\n    });\r\n\r\n    reset();\r\n  };\r\n\r\n  const handleChange = event => {\r\n    const { value, name } = event.target;\r\n    if (name === 'name' || name === 'number') {\r\n      setContact({\r\n        ...contact,\r\n        [name]: value,\r\n      });\r\n    }\r\n  };\r\n\r\n  const reset = () => {\r\n    setContact({\r\n      name: '',\r\n      number: '',\r\n    });\r\n  };\r\n\r\n  return (\r\n    <form className={s.form} onSubmit={handleSubmit}>\r\n      <label className={s.label} htmlFor={nameInputId}>\r\n        Name{' '}\r\n        <input\r\n          type=\"text\"\r\n          name=\"name\"\r\n          value={contact.name}\r\n          onChange={handleChange}\r\n          id={nameInputId}\r\n          pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\r\n          title=\"Имя может состоять только из букв, апострофа, тире и пробелов. Например Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan и т. п.\"\r\n          required\r\n        />\r\n      </label>\r\n      <label className={s.label} htmlFor={numberInputId}>\r\n        Number{' '}\r\n        <input\r\n          type=\"tel\"\r\n          name=\"number\"\r\n          value={contact.number}\r\n          onChange={handleChange}\r\n          id={numberInputId}\r\n          pattern=\"\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}\"\r\n          title=\"Номер телефона должен состоять цифр и может содержать пробелы, тире, круглые скобки и может начинаться с +\"\r\n          required\r\n        />\r\n      </label>\r\n\r\n      <button className={s.button} type=\"submit\">\r\n        Add contact\r\n      </button>\r\n    </form>\r\n  );\r\n}","import PropTypes from 'prop-types';\nimport s from './Filter.module.css';\n\nexport default function Filter({ value, onChange }) {\n  return (\n    <label className={s.label}>\n      Find contacts by name\n      <input type=\"text\" value={value} onChange={onChange} />\n    </label>\n  );\n}\n\nFilter.propTypes = {\n  value: PropTypes.string,\n  onChange: PropTypes.func,\n};\n","import { createAsyncThunk } from '@reduxjs/toolkit';\r\nimport axios from 'axios';\r\n\r\nexport const createContact = createAsyncThunk(\r\n  'contacts/createContact',\r\n  async (contact) => {\r\n    const result = await axios.post('https://61546f8d2473940017efae5d.mockapi.io/contacts', contact);\r\n    return result.data;\r\n  }\r\n);\r\n\r\nexport const getContacts = createAsyncThunk(\r\n  'contacts/getContact',\r\n  async () => {\r\n    const result = await axios.get('https://61546f8d2473940017efae5d.mockapi.io/contacts');\r\n    return result.data;\r\n  }\r\n);\r\n\r\nexport const deleteContact = createAsyncThunk(\r\n  'contacts/deleteContact',\r\n  async (id) => {\r\n    // const result = await axios.delete(`https://61546f8d2473940017efae5d.mockapi.io/contacts/${id}`);\r\n    return id;\r\n  }\r\n)\r\n\r\n// import { types } from './types';\r\n// import axios from \"axios\";\r\n\r\n// export const setContacts = array => ({\r\n//   type: types.SET_CONTACT,\r\n//   payload: array,\r\n// });\r\n\r\n// export const addContact = data => ({\r\n//   type: types.ADD_CONTACT,\r\n//   payload: data,\r\n// });\r\n\r\n// export const deleteContact = id => ({\r\n//   type: types.DELETE_CONTACT,\r\n//   payload: id,\r\n// });\r\n\r\n// export const contactFetchStart = () => ({\r\n//   type: types.CONTACT_FETCH_START,\r\n// });\r\n\r\n// export const contactFetchFinished = () => ({\r\n//   type: types.CONTACT_FETCH_FINISHED,\r\n// });\r\n\r\n// export const contactFetchError = (error) => ({\r\n//   type: types.CONTACT_FETCH_ERROR,\r\n//   payload: error,\r\n// });\r\n\r\n// export const getContactsOperation = () => async (dispatch) => {\r\n//   dispatch(contactFetchStart());\r\n//   try {\r\n//     const result = await axios.get(\"https://61546f8d2473940017efae5d.mockapi.io/contacts\");\r\n//     dispatch(setContacts(result.data));\r\n//   } catch (error) {\r\n//     dispatch(contactFetchError(error));\r\n//   } finally {\r\n//     dispatch(contactFetchFinished());\r\n//   }\r\n// };\r\n\r\n// export const postContactOperation = (contact) => async (dispatch) => {\r\n//   dispatch(contactFetchStart());\r\n//   try {\r\n//     const result = await axios.post(\"https://61546f8d2473940017efae5d.mockapi.io/contacts\", contact);\r\n//     dispatch(addContact(result.data));\r\n//   } catch (error) {\r\n//     dispatch(contactFetchError(error));\r\n//   } finally {\r\n//     dispatch(contactFetchFinished());\r\n//   }\r\n// };\r\n\r\n// export const deleteContactOperation = (id) => async (dispatch) => {\r\n//   try {\r\n//     const result = await axios.delete(`https://61546f8d2473940017efae5d.mockapi.io/contacts/${id}`);\r\n//     dispatch(deleteContact(id));\r\n//     console.log(result)\r\n//   } catch (error) {\r\n//     dispatch(contactFetchError(error));\r\n//   }\r\n// }","import PropTypes from 'prop-types';\r\nimport s from './ContactList.module.css';\r\nimport { useDispatch } from 'react-redux';\r\nimport { deleteContact } from '../../redux/actions';\r\n\r\nexport default function ContactList({ contactsData }) {\r\n  const dispatch = useDispatch();\r\n\r\n  const deleteContactClick = id => {\r\n    dispatch(deleteContact(id));\r\n  };\r\n\r\n  return (\r\n    <ul className={s.list}>\r\n      {contactsData.map(({ id, name, number }) => (\r\n        <li className={s.item} key={id}>\r\n          <p className={s.name}>{name}</p>\r\n          <p className={s.number}>{number}</p>\r\n          <button className={s.button} onClick={() => deleteContactClick(id)}>\r\n            Delete\r\n          </button>\r\n        </li>\r\n      ))}\r\n    </ul>\r\n  );\r\n}\r\n\r\nContactList.propTypes = {\r\n  contactsData: PropTypes.array,\r\n};\r\n","import { useState, useEffect, useMemo } from 'react';\r\nimport shortid from 'shortid';\r\nimport './App.css';\r\nimport Container from './components/Container/Container';\r\nimport ContactForm from './components/ContactForm/ContactForm';\r\nimport Filter from './components/Filter/Filter';\r\nimport ContactList from './components/ContactList/ContactList';\r\n\r\nimport { useDispatch, useSelector } from 'react-redux';\r\n// import { postContactOperation, getContactsOperation } from './redux/actions';\r\nimport { createContact, getContacts } from './redux/actions';\r\n\r\n\r\nexport default function App() {\r\n  const dispatch = useDispatch();\r\n  const { items, error, loader } = useSelector(state => state.contacts);\r\n  const [filter, setFilter] = useState('');\r\n\r\n  useEffect(() => {\r\n    dispatch(getContacts());\r\n  }, [dispatch]);\r\n\r\n  const handleSubmitWithAddContact = ({ contact }) => {\r\n    const presentContact = items.find((presentContact) => presentContact.name === contact.name);\r\n    if (presentContact) {\r\n      alert(`${contact.name} is already in contacts. We are working on the ability to edit contacts, but for now you can delete the existing one and add it with a new number.`);\r\n      return;\r\n    }\r\n\r\n    dispatch(createContact({ ...contact, id: shortid.generate() }));\r\n  };\r\n\r\n  const changeFilter = event => {\r\n    setFilter(event.currentTarget.value);\r\n  };\r\n\r\n  const getVisibleContacts = useMemo(() => {\r\n    const normalizedFilter = filter.toLowerCase();\r\n\r\n    let visibleContacts = items.filter(contact =>\r\n      contact.name.toLowerCase().includes(normalizedFilter),\r\n    );\r\n    return visibleContacts;\r\n  }, [items, filter]);\r\n\r\n  return (\r\n    <Container>\r\n      <h1>Phonebook</h1>\r\n      <ContactForm onSubmit={handleSubmitWithAddContact} />\r\n\r\n      <h2>Contacts</h2>\r\n      <Filter value={filter} onChange={changeFilter} />\r\n\r\n      {loader && <h2>Loading...</h2>}\r\n      {error && <h2>{error}</h2>}\r\n      {!loader && !error && <ContactList contactsData={getVisibleContacts} />}\r\n    </Container>\r\n  );\r\n}","import { createSlice } from '@reduxjs/toolkit';\r\nimport { createContact, getContacts, deleteContact } from '../actions';\r\n\r\nconst contactSlice = createSlice({\r\n  name: 'contacts',\r\n  initialState: {\r\n    items: [],\r\n    loader: false,\r\n    error: \"\",\r\n  },\r\n  // reducers: {\r\n  //   addContact: (state, action) => ({ ...state, items: [...state.items, action.payload] }),\r\n  // },\r\n  extraReducers: {\r\n    [createContact.pending]: (state) => {\r\n      state.loader = true;\r\n    },\r\n    [createContact.rejected]: (state) => {\r\n      state.loader = false;\r\n      state.error = \"Error\";\r\n    },\r\n    [createContact.fulfilled]: (state, { payload }) => {\r\n      state.loader = false;\r\n      state.error = \"\";\r\n      state.items = [...state.items, payload];\r\n    },\r\n\r\n    [getContacts.pending]: (state) => {\r\n      state.loader = true;\r\n    },\r\n    [getContacts.rejected]: (state) => {\r\n      state.loader = false;\r\n      state.error = \"Error\";\r\n    },\r\n    [getContacts.fulfilled]: (state, { payload }) => {\r\n      state.loader = false;\r\n      state.error = \"\";\r\n      state.items = [...state.items, ...payload];\r\n    },\r\n\r\n    [deleteContact.fulfilled]: (state, { payload }) => {\r\n      state.items = [ ...state.items.filter(item => item.id !== payload)]; \r\n    }\r\n  }\r\n});\r\n\r\n// export const contactsReducer = (state = initialState, { type, payload }) => {\r\n//   switch (type) {\r\n//     case types.SET_CONTACT:\r\n//       return { ...state, items: payload };\r\n//     case types.ADD_CONTACT:\r\n//       return { ...state, items: [...state.items, payload] };\r\n//     case types.DELETE_CONTACT:\r\n//       return { ...state, items: state.items.filter(item => item.id !== payload)};   \r\n//     case types.CONTACT_FETCH_START:\r\n//       return { ...state, loader: true };\r\n//     case types.CONTACT_FETCH_FINISHED:\r\n//       return { ...state, loader: false };\r\n//     case types.CONTACT_FETCH_ERROR:\r\n//       return { ...state, error: payload };\r\n//     default:\r\n//       return state;\r\n//   }\r\n// };\r\n\r\nexport const { addContact } = contactSlice.actions;\r\nexport default contactSlice.reducer;","// import { createStore, applyMiddleware } from 'redux';\r\n// import { composeWithDevTools } from 'redux-devtools-extension';\r\n// // import { devToolsEnhancer } from 'redux-devtools-extension';\r\n\r\n// const middlewares = [thunk];\r\n\r\n// export const store = createStore(rootReducer, composeWithDevTools(applyMiddleware(...middlewares)));\r\n\r\nimport { configureStore } from '@reduxjs/toolkit';\r\n// import thunk from \"redux-thunk\";\r\n// import logger from 'logger';\r\n// import { rootReducer } from './rootReducer';\r\nimport contactsReducerWithSlice from './slices/contactsSlice';\r\nconst rootReducer = {\r\n  contacts: contactsReducerWithSlice,\r\n}\r\n\r\nexport const store = configureStore({\r\n  reducer: rootReducer,\r\n  devTools: process.env.NODE_ENV === \"development\",\r\n  // middleware: [thunk, logger],\r\n})\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\nimport './index.css';\nimport App from './App';\nimport 'modern-normalize/modern-normalize.css';\nimport { store } from './redux/store';\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <App />\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root'),\n);\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"list\":\"ContactList_list__1RKFH\",\"item\":\"ContactList_item__NvqOU\",\"name\":\"ContactList_name__3RM1i\",\"number\":\"ContactList_number__37g0W\",\"button\":\"ContactList_button__gtWz9\"};"],"sourceRoot":""}